AWSTemplateFormatVersion: "2010-09-09"
# Transform is a macro developed by aws, takes entire template written in SAM syntax and transforms and expands into CFN
Transform: "AWS::Serverless-2016-10-31"     

Parameters:
  UserPoolName: 
    Type: String
    Description: Enter the user pool name that you want to create.
  DeploymentEnvironment:
    Type: String
    Description: Stage in which the Api's need to be deployed


Globals:
  Function:
    Runtime: "python3.9"
    CodeUri: ./src

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: !Ref UserPoolName
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: "preferred_username"
          Required: true
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: "SEX"
          Required: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 2
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AutoVerifiedAttributes:
        - "email"
  
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 10
      IdTokenValidity: 10
      RefreshTokenValidity: 5
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      ClientName: "FitnessClient"
      ExplicitAuthFlows:
        - "ALLOW_ADMIN_USER_PASSWORD_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_USER_SRP_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
    
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: development
      Auth: 
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity: 
              Header: Authorization
        DefaultAuthorizer: CognitoAuth
        # there are more advanced options please refer to the documentation for more
  
  APIHandler1:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: ./src/welcome
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /
            RestApiId: !Ref APIGateway
  
  CreateDailyCalories:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: ./src/create_daily_calories
      Events:
        ApiEvent:
          Type: Api
          Properties: 
            Path: /CreateDailyCalories
            Method: POST
            RestApiId: !Ref APIGateway
  
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_uuid
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: user_uuid
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 2
      TableName: daily_calorie


Outputs:
  CognitoUserPool:
    Description: The CognitoUserPool for the fitness
    Value: !Ref CognitoUserPool
  UserPoolClient:
    Description: The ClientId for the user pool
    Value: !Ref UserPoolClient
  DynamoTable:
    Description: Here is the Dynamodb table created
    Value: !Ref DynamoTable
  